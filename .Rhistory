Food_pattern <- Food_pattern[-c(1:5), ]  # Suppression des lignes d'en-tête inutiles
Food_pattern<-Food_pattern[-c(45:66), ]
Food_pattern$Year[14] <- 2000
View(Food_pattern)
Food_pattern<-Food_pattern %>%
mutate ( `Year` = as.numeric(Year),
`Dairy` = as.numeric(Dairy),
`Added sugars` = as.numeric(`Added sugars`),
`Added fats and oils and dairy fats` = as.numeric(`Added fats and oils and dairy fats`))
Food_pattern<-Food_pattern %>%
mutate ( Year = as.numeric(Year),
Dairy = as.numeric(Dairy),
`Added sugars` = as.numeric(`Added sugars`),
`Added fats and oils and dairy fats` = as.numeric(`Added fats and oils and dairy fats`))
Food_pattern_dairy<- Food_pattern %
Food_pattern<-Food_pattern %>%
mutate ( Year = as.numeric(Year),
Dairy = as.numeric(Dairy),
`Added sugars` = as.numeric(`Added sugars`),
`Added fats a
str(Food_pattern)
Food_pattern<-Food_pattern %>%
mutate ( Year = as.numeric(Year),
Dairy = as.numeric(Dairy),
`Added sugars` = as.numeric(`Added sugars`),
Food_pattern<-Food_pattern %>%
mutate ( Year = as.numeric(Year),
Dairy = as.numeric(Dairy),
`Added sugars` = as.numeric(`Added sugars`),
`Added fats and oils and dairy fats` = as.numeric(`Added fats and oils and dairy fats`))
Food_pattern_dairy<- Food_pattern %>%
mutate(Periode = case_when(
Year >= 1988 & Year <= 1994 ~ "1988-1994",
Year >= 1999 & Year <= 2002 ~ "1999-2003",
Year >= 2001 & Year <= 2004 ~ "2001-2004",
Year >= 2003 & Year <= 2006 ~ "2003-2006",
Year >= 2005 & Year <= 2008 ~ "2005-2008",
Year >= 2007 & Year <= 2010 ~ "2007-2010",
Year >= 2009 & Year <= 2012 ~ "2009-2012",
Year >= 2011 & Year <= 2013 ~ "2011-2014",
TRUE ~ NA_character_  # Exclut les autres années
)) %>%
filter(!is.na(Periode))
print(Food_pattern_dairy)  # Vérifie les données avant la moyenne
FP_dairy<- Food_pattern_dairy %>%
group_by(Periode) %>%
summarise(Moyenne_Conso = mean(Dairy, na.rm = TRUE)) %>%
print()
Food_pattern_SUGAR<- Food_pattern %>%
mutate(Periode = case_when(
Year >= 1988 & Year <= 1994 ~ "1988-1994",
Year >= 1999 & Year <= 2002 ~ "1999-2003",
Year >= 2001 & Year <= 2004 ~ "2001-2004",
Year >= 2003 & Year <= 2006 ~ "2003-2006",
Year >= 2005 & Year <= 2008 ~ "2005-2008",
Year >= 2007 & Year <= 2010 ~ "2007-2010",
Year >= 2009 & Year <= 2012 ~ "2009-2012",
Year >= 2011 & Year <= 2013 ~ "2011-2014",
TRUE ~ NA_character_  # Exclut les autres années
)) %>%
filter(!is.na(Periode))
FP_sugar<- Food_pattern_SUGAR %>%
group_by(Periode) %>%
summarise(Moyenne_Conso = mean(`Added sugars`, na.rm = TRUE)) %>%
print()
Food_pattern_FAT<- Food_pattern %>%
mutate(Periode = case_when(
Year >= 1988 & Year <= 1994 ~ "1988-1994",
Year >= 1999 & Year <= 2002 ~ "1999-2003",
Year >= 2001 & Year <= 2004 ~ "2001-2004",
Year >= 2003 & Year <= 2006 ~ "2003-2006",
Year >= 2005 & Year <= 2008 ~ "2005-2008",
Year >= 2007 & Year <= 2010 ~ "2007-2010",
Year >= 2009 & Year <= 2012 ~ "2009-2012",
Year >= 2011 & Year <= 2013 ~ "2011-2014",
TRUE ~ NA_character_  # Exclut les autres années
)) %>%
filter(!is.na(Periode))
print(Food_pattern_FAT)  # Vérifie les données avant la moyenne
FP_fat<- Food_pattern_FAT %>%
group_by(Periode) %>%
summarise(Moyenne_Conso = mean(`Added fats and oils and dairy fats`, na.rm = TRUE)) %>%
print()
overweightbis<-overweight[-c(1,3,5,7,9,11,13,15,17,18,19,20),]
lm(FP_sugar$Moyenne_Conso ~ overweightbis$ESTIMATE)
summary(lm(FP_sugar$Moyenne_Conso ~ overweightbis$ESTIMATE))
lm(FP_fat$Moyenne_Conso ~ overweightbis$ESTIMATE)
summary(lm(FP_fat$Moyenne_Conso ~ overweightbis$ESTIMATE))
lm(overweightbis$ESTIMATE ~ FP_fat$Moyenne_Conso)
summary(lm(overweightbis$ESTIMATE ~ FP_fat$Moyenne_Conso))
overweight<-read.csv("overweight.csv")
overweight<- overweight[,-c(4)]
overweight<- overweight[,-c(1:2)]
str(Food_pattern)
Food_pattern<-Food_pattern %>%
mutate ( Year = as.numeric(Year),
Dairy = as.numeric(Dairy),
`Added sugars` = as.numeric(`Added sugars`),
`Added fats and oils and dairy fats` = as.numeric(`Added fats and oils and dairy fats`))
getwd()
library(tidyverse)
library(ggplot2)
Consomation<-read.csv("nominal_expenditures.csv")
Population<-read.csv("pop.csv")
Food_pattern<-read.csv("servings.csv") #ce que mange les gens en quatité dans le temps
sucre<-read.csv("sugar.csv")
food_mondialisation<-read.csv("ctcsp.csv")
X<-read.csv("2016-Eating-and-Health-Module-Tables/Table1_2016.csv")
Fastfood_2023<-read.csv("fastfood_2023.csv")
Fastfood_2022<-read.csv("fastfood_2022.csv")
Fastfood_2006<-read.csv("2016-Eating-and-Health-Module-Tables/Table4_2006.csv")
Chronic_disease<-read.csv("Chronic_Disease_Indicators.csv")
Obésité<-read.csv("2023-Obesity-by-demographic.csv")
obésité2<-read.csv("Data.csv")
library(readr)
library(dplyr)
library(tidyverse)
#EVOLUTION CONSOMATION SUCRE/GRAS
# Lire le fichier (remplace "data.csv" par ton fichier)
Food_pattern<- read_csv("servings.csv", col_names = FALSE)
# Définir la deuxième ligne comme noms de colonnes
colnames(Food_pattern) <- Food_pattern[2, ]
# Supprimer les deux premières lignes devenues inutiles
Food_pattern <- Food_pattern[-c(1,2), ]
# Définir la première ligne valide comme noms de colonnes
colnames(Food_pattern) <- Food_pattern[1, ]
# Supprimer les lignes inutiles
Food_pattern <- Food_pattern[-c(1:5), ]  # Suppression des lignes d'en-tête inutiles
Food_pattern<-Food_pattern[-c(45:66), ]
Food_pattern$Year[14] <- 2000
# Convertir les colonnes en numériques
df$Year <- as.numeric(df$Year)
df$`Meat, eggs, and nuts` <- as.numeric(df$`Meat, eggs, and nuts`)
ggplot(Food_pattern, aes(x =Year, y = `Meat, eggs, and nuts`)) +
geom_line(color = "red", size = 2) +  # Ligne rouge
geom_point(color = "black", size = 2) +  # Points noirs
labs(title = "Évolution de la consommation de viande, œufs et noix",
x = "Année",
y = "Consommation (Ounces)") +
theme_minimal()
ggplot(Food_pattern, aes(x =Year, y = `Added fats and oils and dairy fats`)) +
geom_point(color = "black", size = 2) +  # Points noirs
labs(title = "Évolution de la consommation de gras, huile et produit laitiers",
x = "Année",
y = "Consommation (gm)") +
theme_minimal()
ggplot(Food_pattern, aes(x =Year, y = `Added sugars`)) +
geom_point(color = "black", size = 2) +  # Points noirs
labs(title = "Évolution de la consommation de sucre",
x = "Année",
y = "Consommation (gm)") +
theme_minimal()
#SUCRE BIS
sugar_2<-read.csv("table-5-US-food-group-intakes-by-food-source.csv")
#ESSAI SUR LES RACES ET DIABETE
# Supprimer les deux premières lignes devenues inutiles
Race<- Obésité[ -c(20:29), ]
Race<-Race [-c(1:13),]
names(Race)[1] <- "Race/Ethnicity"
names(Race)[2] <- "2023"
ggplot(Race, aes(x = `Race/Ethnicity`, y = `2023`)) +
geom_bar(stat = "identity", color = "black", fill = "skyblue") +  # Ajout de fill et stat="identity"
labs(title = "Évolution de la consommation de sucre",
x = "Race/Ethnicity",
y = "Pourcentage de la population diabétique") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#EVOLUTION DE L OBESITE
#data base: obésité2
library(dplyr)
obesite_us <- obésité2[, -c(4:6)]  # Supprime la colonne class, topic, question
obesite_us <- obesite_us[, -c(11:24)]
obesite_us <- obesite_us[, -c(2)]
Overall<-obesite_us%>% filter(Break_Out == "Overall", Locationdesc == "All States and DC (median) **", Response == "Obese (BMI 30.0 - 99.8)")
ggplot(Overall, aes(x = Year, y = Data_value)) +
geom_line(color = "blue", size = 1) +   # Ligne bleue
geom_point(color = "red", size = 2) +   # Points rouges sur les années
labs(title = "Évolution du taux d'obésité",
x = "Année",
y = "Pourcentage d'obèse dans la pop") +
theme_minimal()
#SAME GRAPH AVEC AUTRE BASE DE DONNEE
ggplot(overweight, aes(x = YEAR, y = ESTIMATE)) +
geom_line(color = "blue", size = 1) +   # Ligne bleue
geom_point(color = "red", size = 2) +   # Points rouges sur les années
labs(title = "Évolution du taux d'obésité",
x = "Année",
y = "Taux d'obèse dans la pop en moyenne") +
theme_minimal()
overweight<-read.csv("overweight.csv")
overweight<- overweight[,-c(4)]
overweight<- overweight[,-c(1:2)]
str(Food_pattern)
Food_pattern<-Food_pattern %>%
mutate ( Year = as.numeric(Year),
Dairy = as.numeric(Dairy),
`Added sugars` = as.numeric(`Added sugars`),
`Added fats and oils and dairy fats` = as.numeric(`Added fats and oils and dairy fats`))
Food_pattern_dairy<- Food_pattern %>%
mutate(Periode = case_when(
Year >= 1988 & Year <= 1994 ~ "1988-1994",
Year >= 1999 & Year <= 2002 ~ "1999-2003",
Year >= 2001 & Year <= 2004 ~ "2001-2004",
Year >= 2003 & Year <= 2006 ~ "2003-2006",
Year >= 2005 & Year <= 2008 ~ "2005-2008",
Year >= 2007 & Year <= 2010 ~ "2007-2010",
Year >= 2009 & Year <= 2012 ~ "2009-2012",
Year >= 2011 & Year <= 2013 ~ "2011-2014",
TRUE ~ NA_character_  # Exclut les autres années
)) %>%
filter(!is.na(Periode))
print(Food_pattern_dairy)  # Vérifie les données avant la moyenne
FP_dairy<- Food_pattern_dairy %>%
group_by(Periode) %>%
summarise(Moyenne_Conso = mean(Dairy, na.rm = TRUE)) %>%
print()
Food_pattern_SUGAR<- Food_pattern %>%
mutate(Periode = case_when(
Year >= 1988 & Year <= 1994 ~ "1988-1994",
Year >= 1999 & Year <= 2002 ~ "1999-2003",
Year >= 2001 & Year <= 2004 ~ "2001-2004",
Year >= 2003 & Year <= 2006 ~ "2003-2006",
Year >= 2005 & Year <= 2008 ~ "2005-2008",
Year >= 2007 & Year <= 2010 ~ "2007-2010",
Year >= 2009 & Year <= 2012 ~ "2009-2012",
Year >= 2011 & Year <= 2013 ~ "2011-2014",
TRUE ~ NA_character_  # Exclut les autres années
)) %>%
filter(!is.na(Periode))
FP_sugar<- Food_pattern_SUGAR %>%
group_by(Periode) %>%
summarise(Moyenne_Conso = mean(`Added sugars`, na.rm = TRUE)) %>%
print()
Food_pattern_FAT<- Food_pattern %>%
mutate(Periode = case_when(
Year >= 1988 & Year <= 1994 ~ "1988-1994",
Year >= 1999 & Year <= 2002 ~ "1999-2003",
Year >= 2001 & Year <= 2004 ~ "2001-2004",
Year >= 2003 & Year <= 2006 ~ "2003-2006",
Year >= 2005 & Year <= 2008 ~ "2005-2008",
Year >= 2007 & Year <= 2010 ~ "2007-2010",
Year >= 2009 & Year <= 2012 ~ "2009-2012",
Year >= 2011 & Year <= 2013 ~ "2011-2014",
TRUE ~ NA_character_  # Exclut les autres années
)) %>%
filter(!is.na(Periode))
print(Food_pattern_FAT)  # Vérifie les données avant la moyenne
FP_fat<- Food_pattern_FAT %>%
group_by(Periode) %>%
summarise(Moyenne_Conso = mean(`Added fats and oils and dairy fats`, na.rm = TRUE)) %>%
print()
overweightbis<-overweight[-c(1,3,5,7,9,11,13,15,17,18,19,20),]
lm(FP_sugar$Moyenne_Conso ~ overweightbis$ESTIMATE)
summary(lm(FP_sugar$Moyenne_Conso ~ overweightbis$ESTIMATE))
lm(FP_fat$Moyenne_Conso ~ overweightbis$ESTIMATE)
summary(lm(FP_fat$Moyenne_Conso ~ overweightbis$ESTIMATE))
lm(overweightbis$ESTIMATE ~ FP_fat$Moyenne_Conso)
summary(lm(overweightbis$ESTIMATE ~ FP_fat$Moyenne_Conso))
################################
# MODELES
################################
# Modèle 1
model1 <- lm(FP_sugar$Moyenne_Conso ~ overweightbis$ESTIMATE)
summary(model1)
# Modèle 2
model2 <- lm(FP_fat$Moyenne_Conso ~ overweightbis$ESTIMATE)
summary(model2)
# Modèle 3
model3 <- lm(overweightbis$ESTIMATE ~ FP_fat$Moyenne_Conso)
summary(model3)
################################
# DIAGNOSTICS POUR CHAQUE MODELE
################################
# ----- MODELE 1 -----
# 1) QQ-plot
qqnorm(model1$residuals, main = "QQ-plot - Model 1 (Sugar vs Overweight)")
qqline(model1$residuals, col = "red")
# 2) Kolmogorov-Smirnov test
ks.test(model1$residuals,
"pnorm",
mean = mean(model1$residuals),
sd   = sd(model1$residuals))
# ----- MODELE 2 -----
qqnorm(model2$residuals, main = "QQ-plot - Model 2 (Fat vs Overweight)")
qqline(model2$residuals, col = "red")
ks.test(model2$residuals,
"pnorm",
mean = mean(model2$residuals),
sd   = sd(model2$residuals))
# ----- MODELE 3 -----
qqnorm(model3$residuals, main = "QQ-plot - Model 3 (Overweight vs Fat)")
qqline(model3$residuals, col = "red")
ks.test(model3$residuals,
"pnorm",
mean = mean(model3$residuals),
sd   = sd(model3$residuals))
View(model1)
View(FP_fat)
View(Obésité)
View(overweight)
View(overweightbis)
View(sucre)
ggplot(Food_pattern, aes(x =Year, y = `Added fats and oils and dairy fats`)) +
geom_point(color = "black", size = 2) +  # Points noirs
labs(title = "Évolution de la consommation de gras, huile et produit laitiers",
x = "Année",
y = "Consommation (gm)") +
theme_minimal()
ggplot(Food_pattern, aes(x =Year, y = `Added sugars`)) +
geom_point(color = "black", size = 2) +  # Points noirs
labs(title = "Évolution de la consommation de sucre",
x = "Année",
y = "Consommation (gm)") +
theme_minimal()
View(Food_pattern_FAT)
View(Food_pattern_SUGAR)
getwd()
library(tidyverse)
library(ggplot2)
Food_pattern<-read.csv("servings.csv") #ce que mange les gens en quatité
Chronic_disease<-read.csv("Chronic_Disease_Indicators.csv")
Obésité<-read.csv("2023-Obesity-by-demographic.csv")
obésité2<-read.csv("Data.csv")
View(Chronic_disease)
View(Food_pattern)
library(readr)
library(dplyr)
library(tidyverse)
#EVOLUTION CONSOMATION SUCRE/GRAS
# Lire le fichier (remplace "data.csv" par ton fichier)
Food_pattern<- read_csv("servings.csv", col_names = FALSE)
# Définir la deuxième ligne comme noms de colonnes
colnames(Food_pattern) <- Food_pattern[2, ]
# Supprimer les deux premières lignes devenues inutiles
Food_pattern <- Food_pattern[-c(1,2), ]
# Définir la première ligne valide comme noms de colonnes
colnames(Food_pattern) <- Food_pattern[1, ]
# Supprimer les lignes inutiles
Food_pattern <- Food_pattern[-c(1:5), ]  # Suppression des lignes d'en-tête inutiles
Food_pattern<-Food_pattern[-c(45:66), ]
Food_pattern$Year[14] <- 2000
# Convertir les colonnes en numériques
df$Year <- as.numeric(df$Year)
ggplot(Food_pattern, aes(x =Year, y = `Meat, eggs, and nuts`)) +
geom_line(color = "red", size = 2) +  # Ligne rouge
geom_point(color = "black", size = 2) +  # Points noirs
labs(title = "Évolution de la consommation de viande, œufs et noix",
x = "Année",
y = "Consommation (Ounces)") +
theme_minimal()
ggplot(Food_pattern, aes(x =Year, y = `Added fats and oils and dairy fats`)) +
geom_point(color = "black", size = 2) +  # Points noirs
labs(title = "Évolution de la consommation de gras, huile et produit laitiers",
x = "Année",
y = "Consommation (gm)") +
theme_minimal()
ggplot(Food_pattern, aes(x =Year, y = `Added sugars`)) +
geom_point(color = "black", size = 2) +  # Points noirs
labs(title = "Évolution de la consommation de sucre",
x = "Année",
y = "Consommation (gm)") +
theme_minimal()
#SUCRE BIS
sugar_2<-read.csv("table-5-US-food-group-intakes-by-food-source.csv")
#ESSAI SUR LES RACES ET DIABETE
# Supprimer les deux premières lignes devenues inutiles
Race<- Obésité[ -c(20:29), ]
Race<-Race [-c(1:13),]
names(Race)[1] <- "Race/Ethnicity"
names(Race)[2] <- "2023"
ggplot(Race, aes(x = `Race/Ethnicity`, y = `2023`)) +
geom_bar(stat = "identity", color = "black", fill = "skyblue") +  # Ajout de fill et stat="identity"
labs(title = "Évolution de la consommation de sucre",
x = "Race/Ethnicity",
y = "Pourcentage de la population diabétique") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#EVOLUTION DE L OBESITE
#data base: obésité2
library(dplyr)
obesite_us <- obésité2[, -c(4:6)]  # Supprime la colonne class, topic, question
obesite_us <- obesite_us[, -c(11:24)]
obesite_us <- obesite_us[, -c(2)]
Overall<-obesite_us%>% filter(Break_Out == "Overall", Locationdesc == "All States and DC (median) **", Response == "Obese (BMI 30.0 - 99.8)")
ggplot(Overall, aes(x = Year, y = Data_value)) +
geom_line(color = "blue", size = 1) +   # Ligne bleue
geom_point(color = "red", size = 2) +   # Points rouges sur les années
labs(title = "Évolution du taux d'obésité",
x = "Année",
y = "Pourcentage d'obèse dans la pop") +
theme_minimal()
#SAME GRAPH AVEC AUTRE BASE DE DONNEE
ggplot(overweight, aes(x = YEAR, y = ESTIMATE)) +
geom_line(color = "blue", size = 1) +   # Ligne bleue
geom_point(color = "red", size = 2) +   # Points rouges sur les années
labs(title = "Évolution du taux d'obésité",
x = "Année",
y = "Taux d'obèse dans la pop en moyenne") +
theme_minimal()
ggplot(overweight, aes(x = YEAR, y = ESTIMATE)) +
geom_line(color = "blue", size = 1) +   # Ligne bleue
geom_point(color = "red", size = 2) +   # Points rouges sur les années
labs(title = "Évolution du taux d'obésité",
x = "Année",
y = "Taux d'obèse dans la pop en moyenne") +
theme_minimal()
View(Overall)
View(Food_pattern)
View(Food_pattern)
getwd()
library(tidyverse)
library(ggplot2)
Consomation<-read.csv("nominal_expenditures.csv")
Population<-read.csv("pop.csv")
Food_pattern<-read.csv("servings.csv") #ce que mange les gens en quatité dans le temps
sucre<-read.csv("sugar.csv")
food_mondialisation<-read.csv("ctcsp.csv")
X<-read.csv("2016-Eating-and-Health-Module-Tables/Table1_2016.csv")
Fastfood_2023<-read.csv("fastfood_2023.csv")
Fastfood_2022<-read.csv("fastfood_2022.csv")
Fastfood_2006<-read.csv("2016-Eating-and-Health-Module-Tables/Table4_2006.csv")
Chronic_disease<-read.csv("Chronic_Disease_Indicators.csv")
Obésité<-read.csv("2023-Obesity-by-demographic.csv")
obésité2<-read.csv("Data.csv")
library(readr)
library(dplyr)
library(tidyverse)
#EVOLUTION CONSOMATION SUCRE/GRAS
# Lire le fichier (remplace "data.csv" par ton fichier)
Food_pattern<- read_csv("servings.csv", col_names = FALSE)
# Définir la deuxième ligne comme noms de colonnes
colnames(Food_pattern) <- Food_pattern[2, ]
# Supprimer les deux premières lignes devenues inutiles
Food_pattern <- Food_pattern[-c(1,2), ]
# Définir la première ligne valide comme noms de colonnes
colnames(Food_pattern) <- Food_pattern[1, ]
# Supprimer les lignes inutiles
Food_pattern <- Food_pattern[-c(1:5), ]  # Suppression des lignes d'en-tête inutiles
Food_pattern<-Food_pattern[-c(45:66), ]
Food_pattern$Year[14] <- 2000
# Convertir les colonnes en numériques
df$Year <- as.numeric(df$Year)
ggplot(Food_pattern, aes(x =Year, y = `Meat, eggs, and nuts`)) +
geom_line(color = "red", size = 2) +  # Ligne rouge
geom_point(color = "black", size = 2) +  # Points noirs
labs(title = "Évolution de la consommation de viande, œufs et noix",
x = "Année",
y = "Consommation (Ounces)") +
theme_minimal()
ggplot(Food_pattern, aes(x =Year, y = `Added fats and oils and dairy fats`)) +
geom_point(color = "black", size = 2) +  # Points noirs
labs(title = "Évolution de la consommation de gras, huile et produit laitiers",
x = "Année",
y = "Consommation (gm)") +
theme_minimal()
ggplot(Food_pattern, aes(x =Year, y = `Added sugars`)) +
geom_point(color = "black", size = 2) +  # Points noirs
labs(title = "Évolution de la consommation de sucre",
x = "Année",
y = "Consommation (gm)") +
theme_minimal()
#SUCRE BIS
sugar_2<-read.csv("table-5-US-food-group-intakes-by-food-source.csv")
#ESSAI SUR LES RACES ET DIABETE
# Supprimer les deux premières lignes devenues inutiles
Race<- Obésité[ -c(20:29), ]
Race<-Race [-c(1:13),]
names(Race)[1] <- "Race/Ethnicity"
names(Race)[2] <- "2023"
ggplot(Race, aes(x = `Race/Ethnicity`, y = `2023`)) +
geom_bar(stat = "identity", color = "black", fill = "skyblue") +  # Ajout de fill et stat="identity"
labs(title = "Évolution de la consommation de sucre",
x = "Race/Ethnicity",
y = "Pourcentage de la population diabétique") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#EVOLUTION DE L OBESITE
#data base: obésité2
library(dplyr)
obesite_us <- obésité2[, -c(4:6)]  # Supprime la colonne class, topic, question
obesite_us <- obesite_us[, -c(11:24)]
obesite_us <- obesite_us[, -c(2)]
Overall<-obesite_us%>% filter(Break_Out == "Overall", Locationdesc == "All States and DC (median) **", Response == "Obese (BMI 30.0 - 99.8)")
ggplot(Overall, aes(x = Year, y = Data_value)) +
geom_line(color = "blue", size = 1) +   # Ligne bleue
geom_point(color = "red", size = 2) +   # Points rouges sur les années
labs(title = "Évolution du taux d'obésité",
x = "Année",
y = "Pourcentage d'obèse dans la pop") +
theme_minimal()
#SAME GRAPH AVEC AUTRE BASE DE DONNEES
ggplot(overweight, aes(x = YEAR, y = ESTIMATE)) +
geom_line(color = "blue", size = 1) +   # Ligne bleue
geom_point(color = "red", size = 2) +   # Points rouges sur les années
labs(title = "Évolution du taux d'obésité",
x = "Année",
y = "Taux d'obèse dans la pop en moyenne") +
theme_minimal()
dia<-read.csv(DiabetesAtlas_NationalData.csv)
dia<-read.csv("DiabetesAtlas_NationalData.csv")
dia<-read.csv("DiabetesAtlas_NationalData.csv", sep = ,)
dia<-read.csv("DiabetesAtlas_NationalData.csv", sep = ",")
dia<-read.csv("DiabetesAtlas_NationalData.csv", sep = ";")
View(dia)
dia<-read.csv2("DiabetesAtlas_NationalData.csv")
View(dia)
View(dia)
dia<-read.csv2("DiabetesAtlas_NationalData.csv", sep = ";", dec = ",")
View(dia)
source("~/GitHub/Memoire-/Nett diabete.R", echo=TRUE)
dia<-read.csv2("DiabetesAtlas_NationalData.csv", sep = ";", dec = ".")
View(dia)
